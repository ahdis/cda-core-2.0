map "http://hl7.org/fhir/cda/mapping/BundleToCdaCh" = "FHIR Bundle to CDA-CH"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as target
uses "http://hl7.org/fhir/cda/StructureDefinition/Author" alias Author as target
uses "http://hl7.org/fhir/cda/StructureDefinition/RecordTarget" alias RecordTarget as target

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as source
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as source

imports "http://hl7.org/fhir/cda/mapping/FhirToCdaTypes"
imports "http://hl7.org/fhir/cda/mapping/BundleToCda"

group BundleToCdaCh(source bundle : Bundle, target cda : ClinicalDocument) {
    bundle -> cda.recordTarget as recordTarget, cda.author as author then BundleToClinicalDocumentCh(bundle, recordTarget, author, cda) "bundle";
}

group BundleToClinicalDocumentCh(source bundle : Bundle, target recordTarget: RecordTarget, target author: Author, target cda : ClinicalDocument) extends BundleToClinicalDocument {
  bundle -> author.templateId as templateId, templateId.root='2.16.756.5.30.1.1.10.9.23' "tempalteId";
  bundle -> recordTarget.templateId as templateId, templateId.root='2.16.756.5.30.1.1.10.2.1' "tempalteId";
  bundle -> cda.custodian as custodian, custodian.templateId as templateId, templateId.root='2.16.756.5.30.1.1.10.2.3' "tempalteId";
  bundle -> cda.realmCode as realmCode then {
    bundle -> realmCode.code = 'CHE' "CHE";
  } "realmCode";
  bundle -> cda.templateId as templateId then {
    bundle -> templateId.root = '2.16.840.1.113883.10.12.2' "root";
  } "HL7 CDA R2 (2005); contains ClinicalDocument.component as structuredBody.";
  bundle -> cda.templateId as templateId then {
    bundle -> templateId.root = '2.16.756.5.30.1.1.10.1.9' "root";
  } "CDA-CH v2.0 structuredBody";
  bundle.entry as entry then {
    entry.resource as resource where $this.ofType(FHIR.Composition) then CompositionClinicalDocumentCH(bundle, resource, cda);
  };
}

group CompositionClinicalDocumentCH(source bundle : Bundle, source composition : Composition, target cda : ClinicalDocument) {
  composition.type as type then {
    type.coding as coding where $this.system='http://snomed.info/sct' -> cda.code as code share docCode, code.translation as translation then CodingCE(coding,translation) "translation";
  } "type";  
  composition.confidentiality as conf where $this.extension.where(url='http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-confidentialitycode').exists() -> cda.confidentialityCode as cdaconf then {
    conf.extension as extension then {
      extension.valueCodeableConcept as valueCodeableConcept then {
        valueCodeableConcept.coding as coding then CodingCE(coding,cdaconf) "coding";
      } "valueCodeableConcept";
    } "extension";
  } "confidentialityCode";
  composition.extension as extension where $this.url='http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-setid' -> cda.setId as setId then {
    extension.valueIdentifier as valueIdentifier then IdentifierII(valueIdentifier,setId) "IdentifierII";
  } "valueIdentifier";
  composition.extension as extension where $this.url='http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-versionnumber' -> cda.versionNumber as versionNumber then {
    extension.valueInteger as valueInteger then IntegerINT(valueInteger,versionNumber) "IntegerInt";
  } "valueIdentifier";  
}
