map "http://hl7.org/fhir/cda/mapping/CDAMedicationCardDocument" = "CDA MedicationCardDocument to FHIR"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/SubstanceAdministration" alias SubstanceAdministration as source

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/StructureDefinition/MedicationStatement" alias Organization as produced

imports "http://hl7.org/fhir/cda/mapping/cdaToFhirTypes"
imports "http://hl7.org/fhir/cda/mapping/ClinicalDocumentHeaderToFHIR"

group ClinicalDocumentBundle(source cda : ClinicalDocument, target bundle : Bundle) extends ClinicalDocumentBundleHeader {
  cda ->  bundle.entry as e first,  e.resource = create('Composition') as composition, 
             bundle.entry as e2, e2.resource = create('Patient') as patient 
             then {
                cda then ClinicalDocumentComposition(cda, composition, patient, bundle) "composition";
                cda.component as component then {
                  component.structuredBody as body then {
                    body.component as component then CDASections(cda, component, patient, composition, bundle) "bodyComponent";
                  } "body";
                } "component";
             } "then";
}

group  SubstanceAdministrationMedication(source source : SubstanceAdministration, target medicationStatement : MedicationStatement, target medication : Medication) {
  source -> medication.id = 'med', medicationStatement.medication = create('Reference') as vt, vt.reference = '#med' "medication";
  source.consumable as consumable then {
    consumable.manufacturedProduct as manufacturedProduct then {
      manufacturedProduct.manufacturedMaterial as manufacturedMaterial then {
        manufacturedMaterial.asContent as asContent then {
          asContent.containerPackagedMedicine as containerPackagedMedicine then {
            containerPackagedMedicine.code as code -> medication.code = code "medication.code";
            containerPackagedMedicine.formCode as formCode -> medication.form = formCode "medication.formCode";
            containerPackagedMedicine.capacityQuantity as capacityQuantity where (%containerPackagedMedicine.formCode.code='10219000') -> medication.amount = create('Ratio') as ratio then {
              capacityQuantity.value as value -> ratio.numerator = create('Quantity') as quantity, 
                       quantity.value = value, 
                       quantity.unit='tablets', 
                       quantity.system='http://unitsofmeasure.org',
                       quantity.code='1',
                       ratio.denominator	 = create('Quantity') as denominator	, 
                       denominator.value='1',
                       denominator.unit='Package',
                       denominator.system='http://unitsofmeasure.org',
                       denominator.code='1'
                       "capacityQuantity"; 
            } "ratio";
          } "containerPackagedMedicine";
        } "asContent";
        manufacturedMaterial.ingredient as ingredient -> medication.ingredient as ing then {
//          ingredient.quantity as quantity -> ing.strength = create('Ratio') as strength then RTOPQPQRatio(quantity, strength) "strength";
          ingredient.quantity as quantity -> ing.strength = quantity "strength";
          ingredient.ingredient as medingredient then {
              medingredient.code as code -> ing.item = create('CodeableConcept') as ingcode then CECodeableConcept(code, ingcode) "ingredientcode";
          } "ingredient.ingredient";
        } "ingredient";
      } "manufacturedMaterial";
    } "manufacturedProduct";
  } "consumable";
}

group SubstanceAdministrationMedicationStatement(source section : Section, source source : SubstanceAdministration, source patient : Patient, target medicationStatement : MedicationStatement) {
  source.templateId as template then TemplateID(template, medicationStatement) "templateID";
  source.id -> medicationStatement.identifier;
  patient -> medicationStatement.subject = reference(patient) "patient";
  source -> medicationStatement.status = 'completed' "completed";
  source -> medicationStatement.contained = create('Medication') as medication then SubstanceAdministrationMedication(source, medicationStatement, medication) "medication";
  source.entryRelationship as entry where typeCode = 'RSON' -> medicationStatement.reasonCode as reasonCode then {
    // extraxt text (Bluthochdruck) from id #mtpc.1.reason in section text <td ID="mtpc.1.reason">Bluthochdruck</td>
    //                                                                             a--------------b------------c
    // id = (%observation.text.reference.value.substring(1))
    // a = %section.text.substring(%section.text.indexOf(%id))
    // res = (%a.substring(%a.indexOf('>')+1, %a.indexOf('<')-%a.indexOf('>')-1))
    // a = %section.text.substring(%section.text.indexOf((%observation.text.reference.value.substring(1))))
    entry.observation as observation -> reasonCode.text =  (%section.text.substring(%section.text.indexOf(%observation.text.reference.value.substring(1))).substring(%section.text.substring(%section.text.indexOf(%observation.text.reference.value.substring(1))).indexOf('>')+1, %section.text.substring(%section.text.indexOf(%observation.text.reference.value.substring(1))).indexOf('<')-%section.text.substring(%section.text.indexOf(%observation.text.reference.value.substring(1))).indexOf('>')-1)) "idRef"; 
  } "entryRelationShip 2.16.756.5.30.1.1.10.4.41";
  source.entryRelationship as entry where typeCode = 'COMP' -> medicationStatement.note as note then {
    entry.act as act -> note.text =  (%section.text.substring(%section.text.indexOf(%act.text.reference.value.substring(1))).substring(%section.text.substring(%section.text.indexOf(%act.text.reference.value.substring(1))).indexOf('>')+1, %section.text.substring(%section.text.indexOf(%act.text.reference.value.substring(1))).indexOf('<')-%section.text.substring(%section.text.indexOf(%act.text.reference.value.substring(1))).indexOf('>')-1)) "idRef"; 
  } "entryRelationShip 2.16.756.5.30.1.1.10.4.41";  
}

group SectionHistoryOfMedicationUse(source source : Section, source patient : Patient, target target, target bundle: Bundle) extends ClinicalDocumentSection {
  source.entry as cdaEntry ->  bundle.entry as e,  e.resource = create('MedicationStatement') as medicationstatement,  target.entry = reference(medicationstatement) then {
    cdaEntry.substanceAdministration as substanceAdministration then SubstanceAdministrationMedicationStatement(source, substanceAdministration, patient, medicationstatement);
  };
}

group CDASections(source cda : ClinicalDocument, source component, source patient : Patient, target composition : Composition, target bundle : Bundle) {
  component.section as srcSection -> composition.section as tgtSection then SectionHistoryOfMedicationUse(srcSection, patient, tgtSection, bundle);
//  component.section as srcSection -> composition.section as tgtSection then ClinicalDocumentSection(srcSection, patient, tgtSection);
}
